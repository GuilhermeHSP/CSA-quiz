'use client'
import { useState } from 'react'
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Check, X } from 'lucide-react'

type Question = {
  question: string
  options: string[]
  correctAnswer: string
  explanation: string
}

export default function ServiceNowCSAQuiz() {
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)
  const [score, setScore] = useState(0)
  const [showFeedback, setShowFeedback] = useState(false)
  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null)
  const [quizCompleted, setQuizCompleted] = useState(false)
  const [questionsAnswered, setQuestionsAnswered] = useState(0)

  // Sample questions - in a real app, you'd have 200+ questions
  const questions: Question[] = [
    {
      question: "What is the purpose of the ServiceNow Update Set?",
      options: [
        "To deploy changes between instances",
        "To schedule automated reports",
        "To manage user permissions",
        "To create new tables in the database"
      ],
      correctAnswer: "To deploy changes between instances",
      explanation: "Update Sets are used to move customizations from one instance to another in the ServiceNow environment."
    },
    {
      question: "Which application is used to manage user access in ServiceNow?",
      options: [
        "User Administration",
        "System Security",
        "Access Control",
        "Organization Administration"
      ],
      correctAnswer: "User Administration",
      explanation: "The User Administration application is specifically designed to manage user accounts, roles, and group memberships."
    },
    {
      question: "What is a Business Rule used for in ServiceNow?",
      options: [
        "To define organizational hierarchy",
        "To automate processes and enforce policies",
        "To create reports and dashboards",
        "To manage scheduled jobs"
      ],
      correctAnswer: "To automate processes and enforce policies",
      explanation: "Business Rules run when records are displayed, inserted, updated, or deleted, allowing automation of processes."
    },
    {
      question: "Which role is required to access the System Definition application?",
      options: [
        "admin",
        "itil",
        "snc_platform",
        "security_admin"
      ],
      correctAnswer: "admin",
      explanation: "The admin role provides full access to the platform, including the System Definition application."
    },
    {
      question: "What does ACL stand for in ServiceNow?",
      options: [
        "Access Control List",
        "Application Configuration Log",
        "Automated Change Log",
        "Advanced Configuration Layer"
      ],
      correctAnswer: "Access Control List",
      explanation: "ACLs (Access Control Lists) determine who can see and interact with specific records and fields in ServiceNow."
    }
  ]

  const handleAnswerSelection = (selectedOption: string) => {
    setSelectedAnswer(selectedOption)
    setShowFeedback(true)
    setQuestionsAnswered(questionsAnswered + 1)

    if (selectedOption === questions[currentQuestionIndex].correctAnswer) {
      setScore(score + 1)
    }
  }

  const moveToNextQuestion = () => {
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1)
      setShowFeedback(false)
      setSelectedAnswer(null)
    } else {
      setQuizCompleted(true)
    }
  }

  const resetQuiz = () => {
    setCurrentQuestionIndex(0)
    setScore(0)
    setShowFeedback(false)
    setSelectedAnswer(null)
    setQuizCompleted(false)
    setQuestionsAnswered(0)
  }

  const calculatePercentage = () => {
    return Math.round((score / questions.length) * 100)
  }

  if (quizCompleted) {
    return (
      <Card className="w-full max-w-2xl mx-auto mt-8">
        <CardHeader>
          <CardTitle className="text-2xl text-center">Quiz Results</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="text-center">
            <p className="text-4xl font-bold mb-2">{calculatePercentage()}%</p>
            <p className="text-lg">
              You scored {score} out of {questions.length} questions correctly
            </p>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="bg-green-100 p-4 rounded-lg">
              <p className="font-semibold text-green-800">Correct</p>
              <p className="text-2xl font-bold text-green-800">{score}</p>
            </div>
            <div className="bg-red-100 p-4 rounded-lg">
              <p className="font-semibold text-red-800">Incorrect</p>
              <p className="text-2xl font-bold text-red-800">{questions.length - score}</p>
            </div>
          </div>

          <div className="text-center">
            <Button onClick={resetQuiz} className="w-full">
              Start New Quiz
            </Button>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card className="w-full max-w-2xl mx-auto mt-8">
      <CardHeader>
        <CardTitle className="text-2xl">ServiceNow CSA Quiz</CardTitle>
        <div className="flex justify-between text-gray-600">
          <p>Question {currentQuestionIndex + 1} of {questions.length}</p>
          <p>Score: {score}</p>
        </div>
      </CardHeader>
      <CardContent className="space-y-6">
        <h2 className="text-xl font-semibold">
          {questions[currentQuestionIndex].question}
        </h2>

        <div className="grid grid-cols-1 gap-3">
          {questions[currentQuestionIndex].options.map((option) => (
            <Button
              key={option}
              onClick={() => handleAnswerSelection(option)}
              variant={
                showFeedback
                  ? option === questions[currentQuestionIndex].correctAnswer
                    ? 'default'
                    : option === selectedAnswer
                    ? 'destructive'
                    : 'outline'
                  : 'outline'
              }
              disabled={showFeedback}
              className="p-4 text-left justify-start"
            >
              {option}
            </Button>
          ))}
        </div>

        {showFeedback && (
          <div className="mt-4 p-4 rounded-lg bg-gray-100">
            <div className="flex items-start gap-2">
              {selectedAnswer === questions[currentQuestionIndex].correctAnswer ? (
                <Check className="text-green-600 mt-1" />
              ) : (
                <X className="text-red-600 mt-1" />
              )}
              <div>
                <p className="font-semibold">
                  {selectedAnswer === questions[currentQuestionIndex].correctAnswer
                    ? 'Correct!'
                    : 'Incorrect!'}
                </p>
                <p className="mt-2 text-gray-700">
                  {questions[currentQuestionIndex].explanation}
                </p>
              </div>
            </div>
            <Button onClick={moveToNextQuestion} className="mt-4 w-full">
              {currentQuestionIndex < questions.length - 1 ? 'Next Question' : 'See Results'}
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  )
}